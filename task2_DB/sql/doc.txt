Для создания базы данных SQLite transport.db с таблицей cars,
нужно выполнить скрипт на Python sql_db.py:

python sql_db.py

Этот скрипт создает базу данных SQLite с таблицей cars, в которой есть поля: 

id - идентификатор, 
brand - название марки автомобиля,
year - год выпуска автомобиля, 
registration_number - рег. номер, 
max_payload - максимальная грузоподъемность
driver_id - . 
Поле id является первичным ключом, и оно автоматически увеличивается с каждой новой записью.

Данный код представляет собой Python-скрипт для создания SQLite базы данных и таблицы 'cars'.
create_connection(database): Эта функция создает или подключается к базе данных с именем,
указанным в параметре database. Она использует модуль sqlite3 для работы с SQLite базами данных. 
В случае успешного подключения, функция возвращает объект соединения conn. Если возникает ошибка, 
она будет отображена, и функция вернет значение None.

create_table_cars(conn): Эта функция создает таблицу 'cars' в базе данных, представляющую информацию об автомобилях. 
Запрос на создание таблицы определен в строке sql, и он содержит определения столбцов: 
'id', 'brand', 'year', 'registration_number', 'max_payload' и 'driver_id'. 
Каждый столбец имеет свой тип данных и некоторые ограничения, например, столбец 'id' - это первичный ключ, 
и значения в нем должны быть уникальными. 
Затем запрос выполняется с помощью курсора cur.execute(sql) и результат записывается в базу данных 
с помощью conn.commit().

if __name__ == '__main__': : Этот блок кода выполняется только если скрипт запущен как основная программа, 
а не импортирован как модуль. Здесь происходит последовательность действий:

Определение имени файла базы данных database.
Создание или подключение к базе данных с помощью create_connection(database). Если подключение установлено успешно, 
в переменной conn будет содержаться объект соединения.
Вызов функции create_table_cars(conn), которая создает таблицу 'cars' в базе данных.
Закрытие соединения с базой данных с помощью conn.close().
После выполнения этого кода будет создана SQLite база данных с именем 'transport.db', 
а в ней будет создана таблица 'cars', готовая к использованию для хранения информации об автомобилях 
с определенными столбцами и типами данных. Если база данных или таблица уже существуют, они не будут пересозданы, 
благодаря фразе IF NOT EXISTS в SQL запросе CREATE TABLE.

etl.py - скрипт на Python для взаимодействия с БД

Этот код является примером работы с SQLite базой данных, где представлены функции 
для создания/подключения к базе данных, создания таблицы, добавления, извлечения, 
обновления и удаления данных об автомобилях.
create_connection(database): Функция создает или подключается к базе данных с именем, указанным в параметре database. 
Если подключение установлено успешно, возвращается объект соединения conn, если возникает ошибка, 
выводится сообщение об ошибке, и функция возвращает значение None.

create_table_cars(conn): Функция создает таблицу 'cars' в базе данных, которая предназначена для хранения информации 
об автомобилях. Если таблица уже существует, она не будет пересоздана. Определение столбцов и их типов 
задается в строке sql, а затем запрос на создание выполняется с помощью курсора cur.execute(sql) 
и команды conn.commit().

insert_car(conn, brand, year, registration_number, max_payload, driver_id): Функция добавляет данные об автомобиле 
в таблицу 'cars'. Запрос на добавление задан в строке sql, и он содержит параметры ? для защиты от SQL-инъекций. 
Значения параметров передаются вторым аргументом методу cur.execute(sql, ...), и команда conn.commit() сохраняет изменения.

get_car_by_id(conn, car_id): Функция извлекает данные об автомобиле по его идентификатору (значение car_id). 
Запрос на выборку задан в строке sql, и значение параметра car_id передается методу cur.execute(sql, (car_id,)). 
Далее с помощью cur.fetchone() извлекается одна строка из результата запроса и возвращается.

update_car(conn, car_id, brand, year, registration_number, max_payload, driver_id): Функция обновляет данные 
об автомобиле с заданным идентификатором. Запрос на обновление задан в строке sql, 
и значения параметров передаются методу cur.execute(sql, ...). 
После выполнения запроса с помощью conn.commit() изменения сохраняются.

delete_car(conn, car_id): Функция удаляет данные об автомобиле с заданным идентификатором. 
Запрос на удаление задан в строке sql, и значение параметра car_id передается методу cur.execute(sql, (car_id,)). 
После удаления с помощью conn.commit() изменения сохраняются.

Последний блок кода if __name__ == '__main__': содержит демонстрацию работы с базой данных:

Создается или подключается к базе данных с именем 'transport.db'.
Создается таблица 'cars', если её еще нет.
Добавляется информация об автомобиле с помощью insert_car.
Извлекается информация об автомобиле по идентификатору с помощью get_car_by_id и выводится на экран.
Обновляется информация об автомобиле с помощью update_car.
Извлекается и выводится на экран обновленная информация об автомобиле.
Удаляется информация об автомобиле с помощью delete_car.
Соединение с базой данных закрывается с помощью conn.close().

Для запуска необходимо выполнить команду:
python etl.py 

Скрипт etl.py можно преобразовать:
Передавая имя файла базы данных и путь к CSV-файлу с данными в качестве аргументов

import.py
скрипт взаимодействовать с базой данных, выполняя добавление, извлечение, обновление и удаление данных 
на основе данных из CSV-файла.

для запуска необходимо выполнить команду:

python .\import.py .\transport.db .\cars_data.csv

